import numpy as np
import tensorflow as tf

with open('/content/drive/MyDrive/gandhiji writings.text', 'r') as file:
    text = file.read()

words = text.split()


unique_words = sorted(list(set(words)))
word_to_int = {word: i for i, word in enumerate(unique_words)}
int_to_word = {i: word for i, word in enumerate(unique_words)}
num_words = len(unique_words)


seq_length = 9  # Length of input sequences (in words)
step = 1  # Step size for sequence generation
input_sequences = []
target_sequences = []
for i in range(0, len(words) - seq_length, step):
    input_seq = words[i:i + seq_length]
    target_seq = words[i + seq_length]
    input_sequences.append([word_to_int.get(word, 0) for word in input_seq])
    target_sequences.append(word_to_int.get(target_seq, 0))

X = np.array(input_sequences)
y = np.array(target_sequences)


model = tf.keras.Sequential([
    tf.keras.layers.Embedding(num_words, 256, input_length=seq_length),
    tf.keras.layers.LSTM(256),
    tf.keras.layers.Dense(num_words, activation='softmax')
])


model.compile(loss='sparse_categorical_crossentropy', optimizer='adam')


model.fit(X, y, batch_size=128, epochs=50)

def generate_text(seed, length):
    generated = seed
    for _ in range(length):
        x = np.array([word_to_int.get(word, 0) for word in seed.split()])
        x = np.reshape(x, (1, len(seed.split())))
        prediction = model.predict(x)
        index = np.argmax(prediction)
        result = int_to_word.get(index, '')
        generated += " " + result
        seed = ' '.join(seed.split()[1:]) + " " + result
    return generated

prompt = "In a gentle way, you can shake the world."
generated_text = generate_text(prompt, 100)
print(generated_text)